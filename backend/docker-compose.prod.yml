version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: nutriflow_db_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nutriflow_db}
      POSTGRES_USER: ${POSTGRES_USER:-nutriflow_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - nutriflow_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nutriflow_user} -d ${POSTGRES_DB:-nutriflow_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Don't expose port in production (internal only)

  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nutriflow_api_prod
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-nutriflow_user}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-nutriflow_db}
      DEBUG: "False"
      ENVIRONMENT: "production"
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-https://nutriflow.fr,https://www.nutriflow.fr}
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-3}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-300}
    ports:
      - "8000:8000"
    networks:
      - nutriflow_network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Production optimizations
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis for rate limiting (production scaling)
  redis:
    image: redis:7-alpine
    container_name: nutriflow_redis_prod
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - nutriflow_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    container_name: nutriflow_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - nutriflow_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  nutriflow_network:
    driver: bridge
