version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: nutriflow_db_dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nutriflow_db}
      POSTGRES_USER: ${POSTGRES_USER:-nutriflow_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    networks:
      - dev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nutriflow_user} -d ${POSTGRES_DB:-nutriflow_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: nutriflow_redis_dev
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD:-defaultpassword}
    volumes:
      - redis_data_dev:/data
    ports:
      - "6380:6379"
    networks:
      - dev_network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-defaultpassword}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # FastAPI Backend
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: nutriflow_api_dev
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-nutriflow_user}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-nutriflow_db}
      REDIS_URL: redis://:${REDIS_PASSWORD:-defaultpassword}@redis:6379/0
      DEBUG: "True"
      ENVIRONMENT: "development"
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3001,http://localhost:3000}
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-10}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-300}
      TRUSTED_HOSTS: ${TRUSTED_HOSTS:-localhost}
    ports:
      - "8000:8000"
    networks:
      - dev_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local

networks:
  dev_network:
    driver: bridge
