version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: nutriflow_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nutriflow_db}
      POSTGRES_USER: ${POSTGRES_USER:-nutriflow_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - nutriflow_internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nutriflow_user} -d ${POSTGRES_DB:-nutriflow_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # No ports exposed - internal only

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: nutriflow_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD:-defaultpassword}
    volumes:
      - redis_data:/data
    networks:
      - nutriflow_internal
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-defaultpassword}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    # No ports exposed - internal only

  # FastAPI Backend
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: nutriflow_api
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-nutriflow_user}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-nutriflow_db}
      REDIS_URL: redis://:${REDIS_PASSWORD:-defaultpassword}@redis:6379/0
      DEBUG: "False"
      ENVIRONMENT: "production"
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-https://nutriflow.fr,https://www.nutriflow.fr}
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-5}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-300}
      TRUSTED_HOSTS: ${TRUSTED_HOSTS:-api.nutriflow.fr,nutriflow.fr,www.nutriflow.fr}
    expose:
      - "8000"
    networks:
      - nutriflow_internal
      - nginx-proxy-manager
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    labels:
      # Nginx Proxy Manager labels
      - "npm.enable=true"
      - "npm.host=api.${DOMAIN:-nutriflow.fr}"
      - "npm.port=8000"
      - "npm.proto=http"

  # Next.js Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        NEXT_PUBLIC_API_URL: https://api.${DOMAIN:-nutriflow.fr}
    container_name: nutriflow_frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.${DOMAIN:-nutriflow.fr}
    expose:
      - "3000"
    networks:
      - nginx-proxy-manager
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    labels:
      # Nginx Proxy Manager labels
      - "npm.enable=true"
      - "npm.host=${DOMAIN:-nutriflow.fr},www.${DOMAIN:-nutriflow.fr}"
      - "npm.port=3000"
      - "npm.proto=http"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  # Internal network for database and Redis (isolated)
  nutriflow_internal:
    driver: bridge
    internal: true
  
  # External network for nginx-proxy-manager
  nginx-proxy-manager:
    external: true
